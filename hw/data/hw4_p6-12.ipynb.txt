{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5feb78ff-3888-4f8e-8e1d-55b6e188970c",
   "metadata": {},
   "source": [
    "## Problem 6.12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "315daa55-b97c-4e74-95a1-6549ea084bee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import PIL\n",
    "import cv2\n",
    "import os\n",
    "import sklearn\n",
    "import pandas as pd\n",
    "import pickle\n",
    "import platform\n",
    "from tqdm.notebook import tqdm\n",
    "from sklearn.multiclass import OneVsOneClassifier\n",
    "from sklearn import preprocessing\n",
    "from sklearn import svm\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from scipy import stats as st"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8d98b1c-ba8e-47eb-b1d9-261a14842eaf",
   "metadata": {},
   "source": [
    "### Computational Environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "7cfca9c7-3f56-487b-8030-822c357fad94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\n",
      "System: Darwin\n",
      "Node Name: client-10-228-18-202.tamulink.tamu.edu\n",
      "Release: 21.5.0\n",
      "Version: Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:29 PDT 2022; root:xnu-8020.121.3~4/RELEASE_ARM64_T8101\n",
      "Machine: arm64\n",
      "Processor: i386\n"
     ]
    }
   ],
   "source": [
    "physical_devices = tf.config.list_physical_devices('GPU')\n",
    "my_system = platform.uname()\n",
    "print(physical_devices)\n",
    "print(f\"System: {my_system.system}\")\n",
    "print(f\"Node Name: {my_system.node}\")\n",
    "print(f\"Release: {my_system.release}\")\n",
    "print(f\"Version: {my_system.version}\")\n",
    "print(f\"Machine: {my_system.machine}\")\n",
    "print(f\"Processor: {my_system.processor}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e0a764a-3d02-4cf3-b4e4-ee0860f51c43",
   "metadata": {},
   "source": [
    "### Helper function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "649b7f11-df46-468d-92ea-a1c8f294dc1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_image(path, width=484, preprocess_input=tf.keras.applications.vgg16.preprocess_input):\n",
    "    \"\"\"\n",
    "    Load and Preprocessing image\n",
    "    \"\"\"\n",
    "    img = tf.keras.utils.load_img(path)\n",
    "    x = tf.keras.utils.img_to_array(img)\n",
    "    x = x[0:width,:,:]\n",
    "    x = np.expand_dims(x, axis=0)\n",
    "    return tf.keras.applications.vgg16.preprocess_input(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b0d6b38-4f4f-4336-957a-20a2fd259007",
   "metadata": {},
   "source": [
    "### Data inspectation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "id": "8e1edca3-9cf4-4a1c-b1f2-03cba758f301",
   "metadata": {},
   "outputs": [],
   "source": [
    "dpath = os.path.join(\"data\", \"CMU-UHCS_Dataset\")\n",
    "pic_path = os.path.join(dpath, \"images\")\n",
    "df_micro = pd.read_csv( os.path.join(dpath, \"micrograph.csv\"))\n",
    "df_micro = df_micro[[\"path\", \"primary_microconstituent\"]]\n",
    "\n",
    "for i in range(0, len(df_micro)):\n",
    "    img_ph = os.path.join(pic_path,df_micro.iloc[i][0])\n",
    "    assert os.path.exists(img_ph)\n",
    "    df_micro.iloc[i][0] = img_ph\n",
    "df_micro2 = df_micro.copy()\n",
    "CLS_rm = [\"pearlite+widmanstatten\", \"martensite\", \"pearlite+spheroidite\"] #(type, sample size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "id": "ca315dad-5c16-4caf-a0a8-05232c0c16a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "for c in CLS_rm:\n",
    "    df_micro.drop(df_micro[df_micro[\"primary_microconstituent\"] == c].index, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "id": "3ae27cb6-ed67-4d40-800a-409ec64fff42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['network', 'pearlite', 'spheroidite', 'spheroidite+widmanstatten']"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# labels\n",
    "name_lbs = df_micro[\"primary_microconstituent\"].unique()\n",
    "le = preprocessing.LabelEncoder()\n",
    "le.fit(name_lbs)\n",
    "list(le.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4d0c2ed4-0d2f-4df8-a11e-7acc2c8139da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>primary_microconstituent</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph2.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph5.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph6.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph7.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>955</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1722.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>957</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1726.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>958</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1730.png</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>959</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1731.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>960</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1732.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>791 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path  \\\n",
       "0       data/CMU-UHCS_Dataset/images/micrograph1.tif   \n",
       "1       data/CMU-UHCS_Dataset/images/micrograph2.tif   \n",
       "3       data/CMU-UHCS_Dataset/images/micrograph5.tif   \n",
       "4       data/CMU-UHCS_Dataset/images/micrograph6.tif   \n",
       "5       data/CMU-UHCS_Dataset/images/micrograph7.tif   \n",
       "..                                               ...   \n",
       "955  data/CMU-UHCS_Dataset/images/micrograph1722.tif   \n",
       "957  data/CMU-UHCS_Dataset/images/micrograph1726.tif   \n",
       "958  data/CMU-UHCS_Dataset/images/micrograph1730.png   \n",
       "959  data/CMU-UHCS_Dataset/images/micrograph1731.tif   \n",
       "960  data/CMU-UHCS_Dataset/images/micrograph1732.tif   \n",
       "\n",
       "      primary_microconstituent  label  \n",
       "0                     pearlite      1  \n",
       "1                  spheroidite      2  \n",
       "3                     pearlite      1  \n",
       "4                  spheroidite      2  \n",
       "5    spheroidite+widmanstatten      3  \n",
       "..                         ...    ...  \n",
       "955                spheroidite      2  \n",
       "957  spheroidite+widmanstatten      3  \n",
       "958                spheroidite      2  \n",
       "959                   pearlite      1  \n",
       "960                   pearlite      1  \n",
       "\n",
       "[791 rows x 3 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dlabel = le.transform(df_micro[\"primary_microconstituent\"])\n",
    "df_micro.insert(2, \"label\", dlabel)\n",
    "df_micro"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29623ffc-3d4c-4d45-a0ad-7e04749d8907",
   "metadata": {},
   "source": [
    "### Data Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b20239b1-9f89-4321-aeea-1bbcbff23f32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train-test split\n",
    "df_test = df_micro.copy()\n",
    "df_train = pd.DataFrame(columns = df_micro.keys())\n",
    "\n",
    "split_info = [(\"spheroidite\", 100),\\\n",
    "              (\"network\", 100),\\\n",
    "              (\"pearlite\", 100),\\\n",
    "              (\"spheroidite+widmanstatten\", 60)] #(type, sample size)\n",
    "\n",
    "\n",
    "\n",
    "for ln in split_info:\n",
    "    label, n = ln\n",
    "    id_train = df_micro[df_micro[\"primary_microconstituent\"] == label][0:n].index\n",
    "    df_test.drop(id_train, axis=0, inplace=True)\n",
    "    df_train = pd.concat([df_train, df_micro.loc[id_train]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2adc8830-9af8-40c3-ad71-480c0cf60045",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>primary_microconstituent</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph2.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph6.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph10.png</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph11.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph29.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1093.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>618</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1129.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>631</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1156.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>672</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1218.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>673</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1219.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>360 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path  \\\n",
       "1       data/CMU-UHCS_Dataset/images/micrograph2.tif   \n",
       "4       data/CMU-UHCS_Dataset/images/micrograph6.tif   \n",
       "8      data/CMU-UHCS_Dataset/images/micrograph10.png   \n",
       "9      data/CMU-UHCS_Dataset/images/micrograph11.tif   \n",
       "20     data/CMU-UHCS_Dataset/images/micrograph29.tif   \n",
       "..                                               ...   \n",
       "596  data/CMU-UHCS_Dataset/images/micrograph1093.tif   \n",
       "618  data/CMU-UHCS_Dataset/images/micrograph1129.tif   \n",
       "631  data/CMU-UHCS_Dataset/images/micrograph1156.tif   \n",
       "672  data/CMU-UHCS_Dataset/images/micrograph1218.tif   \n",
       "673  data/CMU-UHCS_Dataset/images/micrograph1219.tif   \n",
       "\n",
       "      primary_microconstituent label  \n",
       "1                  spheroidite     2  \n",
       "4                  spheroidite     2  \n",
       "8                  spheroidite     2  \n",
       "9                  spheroidite     2  \n",
       "20                 spheroidite     2  \n",
       "..                         ...   ...  \n",
       "596  spheroidite+widmanstatten     3  \n",
       "618  spheroidite+widmanstatten     3  \n",
       "631  spheroidite+widmanstatten     3  \n",
       "672  spheroidite+widmanstatten     3  \n",
       "673  spheroidite+widmanstatten     3  \n",
       "\n",
       "[360 rows x 3 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4e039d84-aea2-4ef9-bda9-34486308768e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>primary_microconstituent</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph436.png</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>238</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph437.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>239</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph440.png</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph442.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph443.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>955</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1722.tif</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>957</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1726.tif</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>958</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1730.png</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>959</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1731.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>960</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1732.tif</td>\n",
       "      <td>pearlite</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>431 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path  \\\n",
       "237   data/CMU-UHCS_Dataset/images/micrograph436.png   \n",
       "238   data/CMU-UHCS_Dataset/images/micrograph437.tif   \n",
       "239   data/CMU-UHCS_Dataset/images/micrograph440.png   \n",
       "241   data/CMU-UHCS_Dataset/images/micrograph442.tif   \n",
       "242   data/CMU-UHCS_Dataset/images/micrograph443.tif   \n",
       "..                                               ...   \n",
       "955  data/CMU-UHCS_Dataset/images/micrograph1722.tif   \n",
       "957  data/CMU-UHCS_Dataset/images/micrograph1726.tif   \n",
       "958  data/CMU-UHCS_Dataset/images/micrograph1730.png   \n",
       "959  data/CMU-UHCS_Dataset/images/micrograph1731.tif   \n",
       "960  data/CMU-UHCS_Dataset/images/micrograph1732.tif   \n",
       "\n",
       "      primary_microconstituent  label  \n",
       "237                spheroidite      2  \n",
       "238                spheroidite      2  \n",
       "239                spheroidite      2  \n",
       "241                spheroidite      2  \n",
       "242                spheroidite      2  \n",
       "..                         ...    ...  \n",
       "955                spheroidite      2  \n",
       "957  spheroidite+widmanstatten      3  \n",
       "958                spheroidite      2  \n",
       "959                   pearlite      1  \n",
       "960                   pearlite      1  \n",
       "\n",
       "[431 rows x 3 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f724aac0-79eb-4a6a-a69c-91add6320e60",
   "metadata": {},
   "source": [
    "### Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f67bf805-ac41-4da8-8d56-47764559f462",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"vgg16\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, None, None, 3)]   0         \n",
      "                                                                 \n",
      " block1_conv1 (Conv2D)       (None, None, None, 64)    1792      \n",
      "                                                                 \n",
      " block1_conv2 (Conv2D)       (None, None, None, 64)    36928     \n",
      "                                                                 \n",
      " block1_pool (MaxPooling2D)  (None, None, None, 64)    0         \n",
      "                                                                 \n",
      " block2_conv1 (Conv2D)       (None, None, None, 128)   73856     \n",
      "                                                                 \n",
      " block2_conv2 (Conv2D)       (None, None, None, 128)   147584    \n",
      "                                                                 \n",
      " block2_pool (MaxPooling2D)  (None, None, None, 128)   0         \n",
      "                                                                 \n",
      " block3_conv1 (Conv2D)       (None, None, None, 256)   295168    \n",
      "                                                                 \n",
      " block3_conv2 (Conv2D)       (None, None, None, 256)   590080    \n",
      "                                                                 \n",
      " block3_conv3 (Conv2D)       (None, None, None, 256)   590080    \n",
      "                                                                 \n",
      " block3_pool (MaxPooling2D)  (None, None, None, 256)   0         \n",
      "                                                                 \n",
      " block4_conv1 (Conv2D)       (None, None, None, 512)   1180160   \n",
      "                                                                 \n",
      " block4_conv2 (Conv2D)       (None, None, None, 512)   2359808   \n",
      "                                                                 \n",
      " block4_conv3 (Conv2D)       (None, None, None, 512)   2359808   \n",
      "                                                                 \n",
      " block4_pool (MaxPooling2D)  (None, None, None, 512)   0         \n",
      "                                                                 \n",
      " block5_conv1 (Conv2D)       (None, None, None, 512)   2359808   \n",
      "                                                                 \n",
      " block5_conv2 (Conv2D)       (None, None, None, 512)   2359808   \n",
      "                                                                 \n",
      " block5_conv3 (Conv2D)       (None, None, None, 512)   2359808   \n",
      "                                                                 \n",
      " block5_pool (MaxPooling2D)  (None, None, None, 512)   0         \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 14,714,688\n",
      "Trainable params: 14,714,688\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# VGG16\n",
    "\n",
    "base_model = tf.keras.applications.vgg16.VGG16(\n",
    "    include_top=False,\n",
    "    weights='imagenet',\n",
    "    input_tensor=None,\n",
    "    input_shape=None,\n",
    "    pooling=None,\n",
    "    classes=1000,\n",
    "    classifier_activation='softmax'\n",
    ")\n",
    "\n",
    "base_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad97f25f-844c-48c5-b581-c962fe722be7",
   "metadata": {},
   "source": [
    "Use five layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "29d52c02-08ac-4551-9997-315133304b5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['block1_pool', 'block2_pool', 'block3_pool', 'block4_pool', 'block5_pool']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "out_layer_ns = [\"block{}_pool\".format(i) for i in range(1,6)]\n",
    "out_layer_ns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6e5204dd-bc48-44cc-8d0a-2d6c44be736d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'block1_pool': <keras.engine.functional.Functional at 0x29f411e20>,\n",
       " 'block2_pool': <keras.engine.functional.Functional at 0x2af72ecd0>,\n",
       " 'block3_pool': <keras.engine.functional.Functional at 0x2b06b63d0>,\n",
       " 'block4_pool': <keras.engine.functional.Functional at 0x2b06be5b0>,\n",
       " 'block5_pool': <keras.engine.functional.Functional at 0x2b06bedf0>}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Construct 5 models for feature extraction\n",
    "extmodel = dict(zip(out_layer_ns, [tf.keras.Model(\n",
    "    inputs= base_model.input,\n",
    "    outputs=base_model.get_layer(bk_name).output\n",
    ") for bk_name in out_layer_ns]))\n",
    "\n",
    "extmodel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9c3b31a8-813c-4614-8c13-0068e62a1e9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[64, 128, 256, 512, 512]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display output dimensions\n",
    "out_shapes = [extmodel[m].output_shape[-1] for m in extmodel.keys()]\n",
    "out_shapes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d3aa7357-7d7e-4448-b3e9-a3fd26de16c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'block1_pool': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]),\n",
       " 'block2_pool': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]),\n",
       " 'block3_pool': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]),\n",
       " 'block4_pool': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]]),\n",
       " 'block5_pool': array([[0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        ...,\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.],\n",
       "        [0., 0., 0., ..., 0., 0., 0.]])}"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initiate feature maps for testing and training\n",
    "fs_train = [np.zeros((df_train.shape[0], n_f)) for n_f in out_shapes]\n",
    "fs_test = [np.zeros((df_test.shape[0], n_f)) for n_f in out_shapes]\n",
    "\n",
    "features_train = dict(zip(out_layer_ns, fs_train))\n",
    "features_test = dict(zip(out_layer_ns, fs_test))\n",
    "\n",
    "features_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "id": "71d50cca-be63-4ae4-9a2e-ecc4b46841be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature extraction with VGG16\n",
    "if os.path.exists(os.path.join(dpath, \"feature_train.pkl\")) == False:\n",
    "    for m in tqdm(extmodel.keys()):\n",
    "        for i, df in enumerate([df_train, df_test]):\n",
    "            for j, ph in tqdm(enumerate(df[\"path\"])):\n",
    "                x = load_image(ph)\n",
    "                xb = extmodel[m].predict(x, verbose = 0) # silence output\n",
    "                F = np.mean(xb,axis=(0,1,2))\n",
    "                # Save features\n",
    "                if i ==0:\n",
    "                    features_train[m][j, :] = F\n",
    "                else:\n",
    "                    features_test[m][j, :] = F\n",
    "    #save file\n",
    "    paths =  dict(zip([\"train\", \"test\"],\\\n",
    "        [os.path.join(dpath, \"feature_{}.pkl\".format(n))\\\n",
    "         for n in [\"train\", \"test\"]]))\n",
    "    ## Create new files\n",
    "    f_train = open(paths[\"train\"], \"wb\")\n",
    "    f_test = open(paths[\"test\"], \"wb\")\n",
    "    ## Write\n",
    "    pickle.dump(features_train, f_train)\n",
    "    pickle.dump(features_test, f_test)\n",
    "    ## Close files\n",
    "    f_train.close()\n",
    "    f_test.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f6087f3-1c24-4602-8d3e-c6fdcabd8bd5",
   "metadata": {},
   "source": [
    "### SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "5cc07fd1-7334-4974-b755-bee0a9ef3393",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load data\n",
    "ftn = open(paths[\"train\"], \"rb\")\n",
    "ftt = open(paths[\"test\"], \"rb\")\n",
    "featn = pickle.load(ftn) # train feature\n",
    "featt = pickle.load(ftt) # test feature\n",
    "ftn.close()\n",
    "ftt.close()\n",
    "\n",
    "# label\n",
    "ltrain = df_train[[\"primary_microconstituent\", \"label\"]].reset_index()\n",
    "ltest = df_test[[\"primary_microconstituent\", \"label\"]].reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "04379861-3ea4-4533-9f21-5ec1e47dbb8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>primary_microconstituent</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20</td>\n",
       "      <td>spheroidite</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>355</th>\n",
       "      <td>596</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>356</th>\n",
       "      <td>618</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>357</th>\n",
       "      <td>631</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>358</th>\n",
       "      <td>672</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>673</td>\n",
       "      <td>spheroidite+widmanstatten</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>360 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index   primary_microconstituent label\n",
       "0        1                spheroidite     2\n",
       "1        4                spheroidite     2\n",
       "2        8                spheroidite     2\n",
       "3        9                spheroidite     2\n",
       "4       20                spheroidite     2\n",
       "..     ...                        ...   ...\n",
       "355    596  spheroidite+widmanstatten     3\n",
       "356    618  spheroidite+widmanstatten     3\n",
       "357    631  spheroidite+widmanstatten     3\n",
       "358    672  spheroidite+widmanstatten     3\n",
       "359    673  spheroidite+widmanstatten     3\n",
       "\n",
       "[360 rows x 3 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ltrain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27b7458b-d24f-47d4-a58b-b3eb5fcbe9a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2,\n",
       "       0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 0,\n",
       "       0, 0, 2, 2, 0, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2,\n",
       "       2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2,\n",
       "       0, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0,\n",
       "       0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2,\n",
       "       2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0,\n",
       "       2, 0, 2, 2, 0, 2, 0, 2, 2, 3, 0, 2, 2, 0, 3, 2, 2, 0, 0, 2, 0, 2,\n",
       "       0, 2, 2, 2, 2, 0, 2, 3, 0, 2, 0, 2, 0, 3, 2, 0, 2, 0, 2, 2, 2, 3,\n",
       "       2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 3, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 0,\n",
       "       0, 2, 0, 2, 0, 0, 2, 0, 3, 0, 2, 2, 2, 2, 3, 3, 0, 2, 0, 0, 2, 0,\n",
       "       0, 2, 2, 2, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 1, 3, 1, 0, 2, 2, 1,\n",
       "       0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 3, 2, 2, 0, 1, 1, 2, 1, 3, 3, 1, 2,\n",
       "       2, 0, 3, 0, 2, 0, 2, 2, 2, 3, 0, 2, 2, 2, 0, 0, 3, 1, 1, 1, 0, 1,\n",
       "       3, 0, 1, 2, 2, 3, 2, 2, 0, 2, 2, 0, 2, 0, 2, 2, 2, 1, 1, 2, 1, 2,\n",
       "       2, 2, 1, 1, 0, 0, 2, 1, 2, 3, 2, 2, 2, 0, 2, 2, 2, 2, 1, 1, 0, 2,\n",
       "       2, 0, 2, 2, 0, 0, 2, 1, 2, 3, 2, 1, 1])"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ltest[\"label\"].to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3c64e065-5c8d-4348-a366-51b7da4516c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(360, 64)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "featn[\"block1_pool\"].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "d8ac7a88-5bf9-4613-b954-0fb8302a967c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(360,)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df_train[\"label\"].to_numpy().astype(int)\n",
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "e9888230-b073-493c-8924-dc680c729f28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(gamma=&#x27;auto&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(gamma=&#x27;auto&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC(gamma='auto')"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = svm.SVC(kernel=\"rbf\", C=1., gamma=\"auto\")\n",
    "clf.fit(featn[\"block1_pool\"], y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "8e128646-d148-4307-825a-5bdc535e11f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 3, 2, 1, 2, 1, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2,\n",
       "       2, 3, 0, 2, 2, 2, 2, 0, 2, 2, 2, 3, 2, 2, 1, 2, 1, 2, 3, 2, 3, 2,\n",
       "       2, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 0,\n",
       "       3, 2, 2, 0, 1, 1, 1, 2, 3, 2, 0, 0, 3, 0, 2, 2, 0, 0, 0, 0, 2, 2,\n",
       "       3, 2, 1, 3, 2, 2, 0, 0, 2, 1, 2, 2, 2, 3, 0, 2, 2, 0, 3, 2, 2, 2,\n",
       "       3, 3, 2, 2, 0, 2, 2, 3, 2, 2, 2, 2, 2, 0, 0, 3, 0, 3, 0, 2, 2, 0,\n",
       "       2, 1, 2, 0, 2, 2, 3, 2, 1, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2,\n",
       "       0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 1, 2, 2, 2, 2,\n",
       "       0, 2, 2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 3, 2, 2, 2, 2, 0, 2, 2, 2, 2,\n",
       "       2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 1, 3, 2, 2, 2, 2, 2, 1, 2, 0,\n",
       "       2, 2, 3, 2, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2,\n",
       "       0, 0, 3, 2, 2, 0, 2, 3, 2, 2, 0, 2, 0, 3, 2, 2, 2, 2, 1, 3, 3, 0,\n",
       "       1, 2, 2, 0, 0, 2, 0, 2, 3, 2, 2, 2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0,\n",
       "       0, 2, 2, 2, 3, 2, 2, 0, 2, 0, 2, 2, 3, 0, 3, 1, 0, 2, 3, 2, 2, 2,\n",
       "       2, 2, 3, 2, 0, 3, 2, 2, 0, 2, 2, 2, 2, 0, 3, 2, 1, 1, 3, 2, 2, 1,\n",
       "       0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 3, 2, 2,\n",
       "       2, 2, 1, 2, 2, 3, 2, 2, 2, 0, 2, 3, 0, 2, 0, 0, 3, 1, 1, 1, 0, 1,\n",
       "       2, 2, 1, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 1, 3, 2, 1, 2,\n",
       "       2, 2, 2, 1, 2, 3, 2, 0, 2, 2, 2, 2, 0, 0, 1, 3, 0, 2, 1, 2, 3, 1,\n",
       "       2, 2, 2, 2, 0, 0, 1, 1, 0, 3, 2, 1, 1])"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(featt[\"block1_pool\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f5bf26-ac85-47b3-9306-ea3d90ecf042",
   "metadata": {},
   "source": [
    "#### One-to-One SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "id": "70e10709-f9a9-4145-a5d9-7e65813bbad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class One2OneSVM:\n",
    "    def __init__(self, n_class=4):\n",
    "        self.n_class = n_class\n",
    "        self.clfs = [[svm.SVC(kernel=\"rbf\", C=1., gamma=\"auto\")\\\n",
    "                     for i in range(0,self.n_class)]\\\n",
    "                     for j in range(0,self.n_class)]\n",
    "        self.cv = np.zeros((self.n_class,self.n_class))\n",
    "    def train(self, ltrain, feature, fold=10):\n",
    "        # traversal all features\n",
    "        for i in range(0, self.n_class-1):\n",
    "            lis = ltrain[ltrain[\"label\"] == i].index.to_numpy()\n",
    "            for j in range(i+1, self.n_class):\n",
    "                ljs = ltrain[ltrain[\"label\"] == j].index.to_numpy()\n",
    "                # Data\n",
    "                X = np.concatenate(\\\n",
    "                  (feature[lis,:],\\\n",
    "                   feature[ljs,:]), axis=0)\n",
    "                Y = np.concatenate((np.ones(len(lis))*i,np.ones(len(ljs))*j))\n",
    "                # Train SVM\n",
    "                scores = sklearn.model_selection.cross_val_score(self.clfs[i][j], X, Y, cv=fold)\n",
    "                self.clfs[i][j].fit(X,Y)\n",
    "                self.cv[i][j] = np.max(scores)\n",
    "                \n",
    "    def test_1v1_error(self, ltest, feature):\n",
    "        # traversal all features\n",
    "        errM = np.zeros((self.n_class, self.n_class))\n",
    "        for i in range(0, self.n_class-1):\n",
    "            lis = ltest[ltest[\"label\"] == i].index.to_numpy()\n",
    "            for j in range(i+1, self.n_class):\n",
    "                ljs = ltest[ltest[\"label\"] == j].index.to_numpy()\n",
    "                # Data\n",
    "                X = np.concatenate(\\\n",
    "                  (feature[lis,:],\\\n",
    "                   feature[ljs,:]), axis=0)\n",
    "                Y = np.concatenate((np.ones(len(lis))*i,np.ones(len(ljs))*j))\n",
    "                # Train SVM\n",
    "                y_pred = self.clfs[i][j].predict(X)\n",
    "                errM[i,j] = error(Y, y_pred)\n",
    "        return errM\n",
    "        \n",
    "    def predict(self, feature):\n",
    "        predM = np.zeros(( int(self.n_class * (self.n_class -1)/2) , feature.shape[0]))\n",
    "        c = 0\n",
    "        for i in range(0, self.n_class-1):\n",
    "            for j in range(i+1, self.n_class):\n",
    "                predM[c,:] = self.clfs[i][j].predict(feature)\n",
    "                c += 1\n",
    "        return st.mode(predM, axis=0, keepdims=True).mode[0,:] #majority voting\n",
    "\n",
    "def error(ans, pred):\n",
    "    assert len(ans) == len(pred)\n",
    "    return (ans != pred).sum()/float(ans.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "279afeaf-bfe4-4245-92b0-e1ac2e0b3c82",
   "metadata": {
    "tags": []
   },
   "source": [
    "### (a)\n",
    "> The convolution layer used and the cross-validated error estimate for each of the six\n",
    "pairwise two-label classifiers\n",
    "\n",
    "\n",
    "### (b)\n",
    "\n",
    "> Separate test error rates on the unused micrographs of each of the four categories, for\n",
    "the pairwise two-label classifiers and the multilabel one-vs-one voting classifier described\n",
    "previously. For the pairwise classifiers use only the test micrographs with the two labels\n",
    "used to train the classifier. For the multilabel classifier, use the test micrographs with\n",
    "the corresponding four labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "id": "71c9759d-931e-4776-8bf4-56532aed8b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "def df_cv(m, clf, info=\"\"):\n",
    "    var1 = []\n",
    "    var2 = []\n",
    "    cvs = []\n",
    "    errs = []\n",
    "    for i in range(0, m.shape[0]-1):\n",
    "        for j in range(i+1, m.shape[0]):\n",
    "            var1.append(i)\n",
    "            var2.append(j)\n",
    "            cvs.append(clf.cv[i,j])\n",
    "            errs.append(m[i,j])\n",
    "    infos = [info] * len(errs)\n",
    "    return pd.DataFrame({\"Info\": infos, \"Label 1\": var1, \"Label 2\": var2, \"Test error\": errs,\"Cross Validation Score\": cvs})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c20555bd-387e-4578-96de-2914e092d3af",
   "metadata": {},
   "source": [
    "#### Pair-wise classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "id": "40b509df-fdfa-4136-9dcd-72743a32f995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Info</th>\n",
       "      <th>Label 1</th>\n",
       "      <th>Label 2</th>\n",
       "      <th>Test error</th>\n",
       "      <th>Cross Validation Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.290155</td>\n",
       "      <td>0.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.906040</td>\n",
       "      <td>0.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.071186</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.709845</td>\n",
       "      <td>0.650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.919463</td>\n",
       "      <td>0.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.071186</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.290155</td>\n",
       "      <td>0.600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.080537</td>\n",
       "      <td>0.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.071186</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.290155</td>\n",
       "      <td>0.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.157895</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.080537</td>\n",
       "      <td>0.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.466667</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.071186</td>\n",
       "      <td>0.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.073529</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.033679</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.060150</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.088889</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.061017</td>\n",
       "      <td>0.875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Info  Label 1  Label 2  Test error  Cross Validation Score\n",
       "0  block1_pool        0        1    0.823529                   0.500\n",
       "1  block1_pool        0        2    0.290155                   0.550\n",
       "2  block1_pool        0        3    0.157895                   0.625\n",
       "3  block1_pool        1        2    0.906040                   0.500\n",
       "4  block1_pool        1        3    0.466667                   0.625\n",
       "5  block1_pool        2        3    0.071186                   0.625\n",
       "0  block2_pool        0        1    0.823529                   0.650\n",
       "1  block2_pool        0        2    0.709845                   0.650\n",
       "2  block2_pool        0        3    0.157895                   0.625\n",
       "3  block2_pool        1        2    0.919463                   0.500\n",
       "4  block2_pool        1        3    0.466667                   0.625\n",
       "5  block2_pool        2        3    0.071186                   0.625\n",
       "0  block3_pool        0        1    0.823529                   0.600\n",
       "1  block3_pool        0        2    0.290155                   0.600\n",
       "2  block3_pool        0        3    0.157895                   0.625\n",
       "3  block3_pool        1        2    0.080537                   0.550\n",
       "4  block3_pool        1        3    0.466667                   0.625\n",
       "5  block3_pool        2        3    0.071186                   0.625\n",
       "0  block4_pool        0        1    0.823529                   0.500\n",
       "1  block4_pool        0        2    0.290155                   0.550\n",
       "2  block4_pool        0        3    0.157895                   0.625\n",
       "3  block4_pool        1        2    0.080537                   0.500\n",
       "4  block4_pool        1        3    0.466667                   0.625\n",
       "5  block4_pool        2        3    0.071186                   0.625\n",
       "0  block5_pool        0        1    0.073529                   1.000\n",
       "1  block5_pool        0        2    0.033679                   1.000\n",
       "2  block5_pool        0        3    0.060150                   1.000\n",
       "3  block5_pool        1        2    0.000000                   1.000\n",
       "4  block5_pool        1        3    0.088889                   1.000\n",
       "5  block5_pool        2        3    0.061017                   0.875"
      ]
     },
     "execution_count": 512,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_errors = []\n",
    "for b in out_layer_ns:\n",
    "    clf1 = One2OneSVM()\n",
    "    clf1.train(ltrain, features_train[b])\n",
    "    errs = clf1.test_1v1_error(ltest, features_test[b])\n",
    "    df_errors.append(df_cv(errs, clf1, b))\n",
    "    \n",
    "res_error = pd.concat(df_errors)\n",
    "res_error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e53f9db-a503-4ed9-ac4f-16da65015c72",
   "metadata": {},
   "source": [
    "#### Multiple one-vs-one classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "id": "0d6a65c6-30d2-4f10-b82c-1c0a05e6ce1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Info</th>\n",
       "      <th>Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>block1_pool</td>\n",
       "      <td>0.064965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>block2_pool</td>\n",
       "      <td>0.055684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>block3_pool</td>\n",
       "      <td>0.635731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>block4_pool</td>\n",
       "      <td>0.635731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>block5_pool</td>\n",
       "      <td>0.928074</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Info     Score\n",
       "0  block1_pool  0.064965\n",
       "1  block2_pool  0.055684\n",
       "2  block3_pool  0.635731\n",
       "3  block4_pool  0.635731\n",
       "4  block5_pool  0.928074"
      ]
     },
     "execution_count": 513,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Multiclass one-vs-one\n",
    "dfm_errors = []\n",
    "for b in out_layer_ns:\n",
    "    clf = OneVsOneClassifier(svm.SVC(kernel=\"rbf\", C=1., gamma=\"auto\").fit(features_train[b],\\\n",
    "          ltrain[\"label\"].to_numpy(int)))\n",
    "    clf.fit(features_train[b],\\\n",
    "          ltrain[\"label\"].to_numpy(int))\n",
    "    y_predm = clf.predict(features_test[b])\n",
    "    dfm_errors.append(1 - error(y_predm, ltest[\"label\"].to_numpy()))\n",
    "\n",
    "# Display result\n",
    "res_multi1v1 = pd.DataFrame({\"Info\": out_layer_ns, \"Score\": dfm_errors})\n",
    "res_multi1v1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa0e45ce-cec3-440d-a003-9ac90fbba868",
   "metadata": {},
   "source": [
    "### (c)\n",
    "\n",
    "> For the mixed pearlite + spheroidite test micrographs, apply the trained pairwise classifier\n",
    "for pearlite vs. spheroidite and the multilabel voting classifier. Print the predicted labels\n",
    "by these two classifiers side by side (one row for each test micrograph). Comment your\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "id": "f6a00f59-8415-45bd-84e9-9600cff6564b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      Test Label Pairwise (pearlite vs. spheroidite)             Multi-OnevsOne\n",
      "0    spheroidite                         spheroidite                spheroidite\n",
      "1    spheroidite                         spheroidite                spheroidite\n",
      "2    spheroidite                         spheroidite                spheroidite\n",
      "3    spheroidite                         spheroidite                spheroidite\n",
      "4    spheroidite                         spheroidite                spheroidite\n",
      "5    spheroidite                         spheroidite                spheroidite\n",
      "6    spheroidite                         spheroidite                spheroidite\n",
      "7    spheroidite                         spheroidite                spheroidite\n",
      "8    spheroidite                         spheroidite                spheroidite\n",
      "9    spheroidite                         spheroidite                spheroidite\n",
      "10   spheroidite                         spheroidite                spheroidite\n",
      "11   spheroidite                         spheroidite                spheroidite\n",
      "12   spheroidite                         spheroidite                spheroidite\n",
      "13   spheroidite                         spheroidite                spheroidite\n",
      "14   spheroidite                         spheroidite                spheroidite\n",
      "15   spheroidite                         spheroidite                spheroidite\n",
      "16   spheroidite                         spheroidite                spheroidite\n",
      "17   spheroidite                         spheroidite                spheroidite\n",
      "18   spheroidite                         spheroidite                spheroidite\n",
      "19   spheroidite                         spheroidite                spheroidite\n",
      "20   spheroidite                         spheroidite                spheroidite\n",
      "21   spheroidite                         spheroidite                spheroidite\n",
      "22   spheroidite                         spheroidite                spheroidite\n",
      "23   spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "24   spheroidite                         spheroidite                spheroidite\n",
      "25   spheroidite                         spheroidite                spheroidite\n",
      "26   spheroidite                         spheroidite                spheroidite\n",
      "27   spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "28   spheroidite                         spheroidite                spheroidite\n",
      "29   spheroidite                         spheroidite                spheroidite\n",
      "30   spheroidite                         spheroidite                spheroidite\n",
      "31   spheroidite                         spheroidite                spheroidite\n",
      "32   spheroidite                         spheroidite                spheroidite\n",
      "33   spheroidite                         spheroidite                spheroidite\n",
      "34   spheroidite                         spheroidite                spheroidite\n",
      "35   spheroidite                         spheroidite                spheroidite\n",
      "36   spheroidite                         spheroidite                spheroidite\n",
      "37   spheroidite                         spheroidite                spheroidite\n",
      "38   spheroidite                         spheroidite                spheroidite\n",
      "39   spheroidite                         spheroidite                spheroidite\n",
      "40   spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "41   spheroidite                         spheroidite                spheroidite\n",
      "42   spheroidite                         spheroidite                spheroidite\n",
      "43   spheroidite                         spheroidite                spheroidite\n",
      "44   spheroidite                         spheroidite                spheroidite\n",
      "45   spheroidite                         spheroidite                spheroidite\n",
      "46   spheroidite                         spheroidite                spheroidite\n",
      "47   spheroidite                         spheroidite                spheroidite\n",
      "48   spheroidite                         spheroidite                spheroidite\n",
      "49   spheroidite                         spheroidite                spheroidite\n",
      "50   spheroidite                         spheroidite                spheroidite\n",
      "51   spheroidite                         spheroidite                spheroidite\n",
      "52   spheroidite                         spheroidite                spheroidite\n",
      "53   spheroidite                         spheroidite                spheroidite\n",
      "54   spheroidite                         spheroidite                spheroidite\n",
      "55   spheroidite                         spheroidite                spheroidite\n",
      "56   spheroidite                         spheroidite                spheroidite\n",
      "57   spheroidite                         spheroidite                spheroidite\n",
      "58   spheroidite                         spheroidite                spheroidite\n",
      "59   spheroidite                         spheroidite                spheroidite\n",
      "60   spheroidite                         spheroidite                spheroidite\n",
      "61   spheroidite                         spheroidite                spheroidite\n",
      "62   spheroidite                         spheroidite                spheroidite\n",
      "63   spheroidite                         spheroidite                spheroidite\n",
      "64   spheroidite                         spheroidite                spheroidite\n",
      "65   spheroidite                         spheroidite                spheroidite\n",
      "66   spheroidite                         spheroidite                spheroidite\n",
      "67   spheroidite                         spheroidite                spheroidite\n",
      "68   spheroidite                         spheroidite                spheroidite\n",
      "69   spheroidite                         spheroidite                spheroidite\n",
      "70   spheroidite                         spheroidite                spheroidite\n",
      "71   spheroidite                         spheroidite                spheroidite\n",
      "72   spheroidite                         spheroidite                spheroidite\n",
      "73   spheroidite                         spheroidite                spheroidite\n",
      "74   spheroidite                         spheroidite                spheroidite\n",
      "75   spheroidite                         spheroidite                spheroidite\n",
      "76   spheroidite                         spheroidite                spheroidite\n",
      "77   spheroidite                         spheroidite                spheroidite\n",
      "78   spheroidite                         spheroidite                spheroidite\n",
      "79   spheroidite                         spheroidite                spheroidite\n",
      "80   spheroidite                         spheroidite                spheroidite\n",
      "81   spheroidite                         spheroidite                spheroidite\n",
      "82   spheroidite                         spheroidite                spheroidite\n",
      "83   spheroidite                         spheroidite                spheroidite\n",
      "84   spheroidite                         spheroidite                spheroidite\n",
      "85   spheroidite                         spheroidite                spheroidite\n",
      "86   spheroidite                         spheroidite                spheroidite\n",
      "87   spheroidite                         spheroidite                spheroidite\n",
      "88   spheroidite                         spheroidite                spheroidite\n",
      "89   spheroidite                         spheroidite                spheroidite\n",
      "90   spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "91   spheroidite                         spheroidite                spheroidite\n",
      "92   spheroidite                         spheroidite                spheroidite\n",
      "93   spheroidite                         spheroidite                spheroidite\n",
      "94   spheroidite                         spheroidite                spheroidite\n",
      "95   spheroidite                         spheroidite                spheroidite\n",
      "96   spheroidite                         spheroidite                spheroidite\n",
      "97   spheroidite                         spheroidite                spheroidite\n",
      "98   spheroidite                         spheroidite                spheroidite\n",
      "99   spheroidite                         spheroidite                spheroidite\n",
      "100  spheroidite                         spheroidite                spheroidite\n",
      "101  spheroidite                         spheroidite                spheroidite\n",
      "102  spheroidite                         spheroidite                spheroidite\n",
      "103  spheroidite                         spheroidite                spheroidite\n",
      "104  spheroidite                         spheroidite                spheroidite\n",
      "105  spheroidite                         spheroidite                spheroidite\n",
      "106  spheroidite                         spheroidite                spheroidite\n",
      "107  spheroidite                         spheroidite                spheroidite\n",
      "108  spheroidite                         spheroidite                spheroidite\n",
      "109  spheroidite                         spheroidite                spheroidite\n",
      "110  spheroidite                         spheroidite                spheroidite\n",
      "111  spheroidite                         spheroidite                spheroidite\n",
      "112  spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "113  spheroidite                         spheroidite                spheroidite\n",
      "114  spheroidite                         spheroidite                spheroidite\n",
      "115  spheroidite                         spheroidite                spheroidite\n",
      "116  spheroidite                         spheroidite                spheroidite\n",
      "117  spheroidite                         spheroidite                spheroidite\n",
      "118  spheroidite                         spheroidite                spheroidite\n",
      "119  spheroidite                         spheroidite                spheroidite\n",
      "120  spheroidite                         spheroidite                spheroidite\n",
      "121  spheroidite                         spheroidite                spheroidite\n",
      "122  spheroidite                         spheroidite                spheroidite\n",
      "123  spheroidite                         spheroidite                spheroidite\n",
      "124  spheroidite                         spheroidite                spheroidite\n",
      "125  spheroidite                         spheroidite                spheroidite\n",
      "126  spheroidite                         spheroidite                spheroidite\n",
      "127  spheroidite                         spheroidite                spheroidite\n",
      "128  spheroidite                         spheroidite                spheroidite\n",
      "129  spheroidite                         spheroidite                spheroidite\n",
      "130  spheroidite                         spheroidite                spheroidite\n",
      "131  spheroidite                         spheroidite                spheroidite\n",
      "132  spheroidite                         spheroidite                spheroidite\n",
      "133  spheroidite                         spheroidite                spheroidite\n",
      "134  spheroidite                         spheroidite                spheroidite\n",
      "135  spheroidite                         spheroidite                spheroidite\n",
      "136  spheroidite                         spheroidite                spheroidite\n",
      "137  spheroidite                         spheroidite                spheroidite\n",
      "138  spheroidite                         spheroidite                spheroidite\n",
      "139  spheroidite                         spheroidite                spheroidite\n",
      "140  spheroidite                         spheroidite                spheroidite\n",
      "141  spheroidite                         spheroidite                spheroidite\n",
      "142  spheroidite                         spheroidite                spheroidite\n",
      "143  spheroidite                         spheroidite                spheroidite\n",
      "144  spheroidite                         spheroidite                spheroidite\n",
      "145  spheroidite                         spheroidite                spheroidite\n",
      "146  spheroidite                         spheroidite                spheroidite\n",
      "147  spheroidite                         spheroidite                spheroidite\n",
      "148  spheroidite                         spheroidite                spheroidite\n",
      "149  spheroidite                         spheroidite                spheroidite\n",
      "150  spheroidite                         spheroidite                spheroidite\n",
      "151  spheroidite                         spheroidite                spheroidite\n",
      "152  spheroidite                         spheroidite                spheroidite\n",
      "153  spheroidite                         spheroidite                spheroidite\n",
      "154  spheroidite                         spheroidite                spheroidite\n",
      "155  spheroidite                         spheroidite                spheroidite\n",
      "156  spheroidite                         spheroidite                spheroidite\n",
      "157  spheroidite                         spheroidite                spheroidite\n",
      "158  spheroidite                         spheroidite                spheroidite\n",
      "159  spheroidite                         spheroidite                spheroidite\n",
      "160  spheroidite                         spheroidite                spheroidite\n",
      "161  spheroidite                         spheroidite                spheroidite\n",
      "162  spheroidite                         spheroidite                spheroidite\n",
      "163  spheroidite                         spheroidite                spheroidite\n",
      "164  spheroidite                         spheroidite                spheroidite\n",
      "165  spheroidite                         spheroidite                spheroidite\n",
      "166  spheroidite                         spheroidite                    network\n",
      "167  spheroidite                         spheroidite                spheroidite\n",
      "168  spheroidite                         spheroidite                spheroidite\n",
      "169  spheroidite                         spheroidite                spheroidite\n",
      "170  spheroidite                         spheroidite                spheroidite\n",
      "171  spheroidite                         spheroidite                spheroidite\n",
      "172  spheroidite                         spheroidite                spheroidite\n",
      "173  spheroidite                         spheroidite                spheroidite\n",
      "174  spheroidite                         spheroidite                spheroidite\n",
      "175  spheroidite                         spheroidite                spheroidite\n",
      "176  spheroidite                         spheroidite                spheroidite\n",
      "177  spheroidite                         spheroidite                spheroidite\n",
      "178  spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "179  spheroidite                         spheroidite                spheroidite\n",
      "180  spheroidite                         spheroidite                spheroidite\n",
      "181  spheroidite                         spheroidite                spheroidite\n",
      "182  spheroidite                         spheroidite                spheroidite\n",
      "183  spheroidite                         spheroidite                spheroidite\n",
      "184  spheroidite                         spheroidite                spheroidite\n",
      "185  spheroidite                         spheroidite                spheroidite\n",
      "186  spheroidite                         spheroidite                spheroidite\n",
      "187  spheroidite                         spheroidite                spheroidite\n",
      "188  spheroidite                         spheroidite                spheroidite\n",
      "189  spheroidite                         spheroidite                spheroidite\n",
      "190  spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "191  spheroidite                         spheroidite                spheroidite\n",
      "192  spheroidite                         spheroidite                spheroidite\n",
      "193  spheroidite                         spheroidite                spheroidite\n",
      "194  spheroidite                         spheroidite                spheroidite\n",
      "195  spheroidite                         spheroidite                spheroidite\n",
      "196  spheroidite                         spheroidite                spheroidite\n",
      "197  spheroidite                         spheroidite                spheroidite\n",
      "198  spheroidite                         spheroidite                spheroidite\n",
      "199  spheroidite                         spheroidite                spheroidite\n",
      "200  spheroidite                         spheroidite                spheroidite\n",
      "201  spheroidite                         spheroidite                spheroidite\n",
      "202  spheroidite                         spheroidite                spheroidite\n",
      "203  spheroidite                         spheroidite                spheroidite\n",
      "204  spheroidite                         spheroidite                spheroidite\n",
      "205  spheroidite                         spheroidite                spheroidite\n",
      "206  spheroidite                         spheroidite                spheroidite\n",
      "207  spheroidite                         spheroidite                spheroidite\n",
      "208  spheroidite                         spheroidite                spheroidite\n",
      "209  spheroidite                         spheroidite                spheroidite\n",
      "210  spheroidite                         spheroidite                spheroidite\n",
      "211  spheroidite                         spheroidite                spheroidite\n",
      "212  spheroidite                         spheroidite                spheroidite\n",
      "213  spheroidite                         spheroidite                spheroidite\n",
      "214  spheroidite                         spheroidite                spheroidite\n",
      "215  spheroidite                         spheroidite                spheroidite\n",
      "216  spheroidite                         spheroidite                spheroidite\n",
      "217  spheroidite                         spheroidite                spheroidite\n",
      "218  spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "219     pearlite                            pearlite                   pearlite\n",
      "220  spheroidite                         spheroidite                spheroidite\n",
      "221  spheroidite                         spheroidite                spheroidite\n",
      "222  spheroidite                         spheroidite                spheroidite\n",
      "223     pearlite                            pearlite                   pearlite\n",
      "224     pearlite                            pearlite                   pearlite\n",
      "225  spheroidite                         spheroidite                spheroidite\n",
      "226  spheroidite                         spheroidite                spheroidite\n",
      "227     pearlite                            pearlite                   pearlite\n",
      "228  spheroidite                         spheroidite                spheroidite\n",
      "229  spheroidite                         spheroidite                spheroidite\n",
      "230  spheroidite                         spheroidite                spheroidite\n",
      "231  spheroidite                         spheroidite                spheroidite\n",
      "232  spheroidite                         spheroidite                spheroidite\n",
      "233  spheroidite                         spheroidite                    network\n",
      "234  spheroidite                         spheroidite                spheroidite\n",
      "235  spheroidite                         spheroidite  spheroidite+widmanstatten\n",
      "236  spheroidite                         spheroidite                spheroidite\n",
      "237  spheroidite                         spheroidite                spheroidite\n",
      "238     pearlite                            pearlite                   pearlite\n",
      "239     pearlite                            pearlite                   pearlite\n",
      "240  spheroidite                         spheroidite                spheroidite\n",
      "241     pearlite                            pearlite                   pearlite\n",
      "242     pearlite                            pearlite                   pearlite\n",
      "243  spheroidite                         spheroidite                spheroidite\n",
      "244  spheroidite                         spheroidite                spheroidite\n",
      "245  spheroidite                         spheroidite                spheroidite\n",
      "246  spheroidite                         spheroidite                spheroidite\n",
      "247  spheroidite                         spheroidite                spheroidite\n",
      "248  spheroidite                         spheroidite                spheroidite\n",
      "249  spheroidite                         spheroidite                spheroidite\n",
      "250  spheroidite                         spheroidite                spheroidite\n",
      "251  spheroidite                         spheroidite                spheroidite\n",
      "252     pearlite                            pearlite                   pearlite\n",
      "253     pearlite                            pearlite                   pearlite\n",
      "254     pearlite                            pearlite                   pearlite\n",
      "255     pearlite                            pearlite                   pearlite\n",
      "256     pearlite                            pearlite                   pearlite\n",
      "257  spheroidite                         spheroidite                spheroidite\n",
      "258  spheroidite                         spheroidite                spheroidite\n",
      "259  spheroidite                         spheroidite                spheroidite\n",
      "260  spheroidite                         spheroidite                spheroidite\n",
      "261  spheroidite                         spheroidite                spheroidite\n",
      "262  spheroidite                         spheroidite                spheroidite\n",
      "263  spheroidite                         spheroidite                spheroidite\n",
      "264  spheroidite                         spheroidite                spheroidite\n",
      "265  spheroidite                         spheroidite                spheroidite\n",
      "266  spheroidite                         spheroidite                spheroidite\n",
      "267     pearlite                            pearlite                   pearlite\n",
      "268     pearlite                            pearlite                   pearlite\n",
      "269  spheroidite                         spheroidite                spheroidite\n",
      "270     pearlite                            pearlite                   pearlite\n",
      "271  spheroidite                         spheroidite                spheroidite\n",
      "272  spheroidite                         spheroidite                spheroidite\n",
      "273  spheroidite                         spheroidite                spheroidite\n",
      "274     pearlite                            pearlite                   pearlite\n",
      "275     pearlite                            pearlite                   pearlite\n",
      "276  spheroidite                         spheroidite                spheroidite\n",
      "277     pearlite                            pearlite                   pearlite\n",
      "278  spheroidite                         spheroidite                spheroidite\n",
      "279  spheroidite                         spheroidite                spheroidite\n",
      "280  spheroidite                         spheroidite                spheroidite\n",
      "281  spheroidite                         spheroidite                spheroidite\n",
      "282  spheroidite                         spheroidite                spheroidite\n",
      "283  spheroidite                         spheroidite                spheroidite\n",
      "284  spheroidite                         spheroidite                spheroidite\n",
      "285  spheroidite                         spheroidite                spheroidite\n",
      "286     pearlite                            pearlite                   pearlite\n",
      "287     pearlite                            pearlite                   pearlite\n",
      "288  spheroidite                         spheroidite                spheroidite\n",
      "289  spheroidite                         spheroidite                spheroidite\n",
      "290  spheroidite                         spheroidite                spheroidite\n",
      "291  spheroidite                         spheroidite                spheroidite\n",
      "292  spheroidite                         spheroidite                spheroidite\n",
      "293     pearlite                            pearlite                   pearlite\n",
      "294  spheroidite                         spheroidite                spheroidite\n",
      "295  spheroidite                         spheroidite                spheroidite\n",
      "296     pearlite                            pearlite                   pearlite\n",
      "297     pearlite                            pearlite                   pearlite\n"
     ]
    }
   ],
   "source": [
    "ltestm = ltest[(ltest[\"primary_microconstituent\"] == \"pearlite\") |\\\n",
    "      (ltest[\"primary_microconstituent\"] == \"spheroidite\")]\n",
    "feature_m = features_test[\"block5_pool\"][ltestm.index.to_numpy(), :]\n",
    "l = le.transform([\"pearlite\", \"spheroidite\"])\n",
    "\n",
    "pred_pairs = clf1.clfs[l[0]][l[1]].predict(feature_m)\n",
    "pred_multi = clf.predict(feature_m)\n",
    "\n",
    "res_ps = pd.DataFrame({\"Test Label\": le.inverse_transform(ltestm[\"label\"]),\\\n",
    "              \"Pairwise (pearlite vs. spheroidite)\": le.inverse_transform(pred_pairs.astype(int)),\\\n",
    "              \"Multi-OnevsOne\": le.inverse_transform(pred_multi)})\n",
    "\n",
    "print(res_ps.to_string())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f22736d-dfcc-42ff-92ce-2dcd72d84126",
   "metadata": {},
   "source": [
    "### (d)\n",
    "\n",
    "> Now apply the multilabel classifier on the pearlite + WidmanstÂ¨atten and martensite\n",
    "micrographs and print the predicted labels. Compare to the results in part (c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "id": "7fcbd3b8-6470-4afd-adf0-ba310fe78247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['martensite', 'pearlite+widmanstatten']"
      ]
     },
     "execution_count": 519,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_micro2 = df_micro2[(df_micro2[\"primary_microconstituent\"] == \"pearlite+widmanstatten\") |\\\n",
    "(df_micro2[\"primary_microconstituent\"] == \"martensite\")]\n",
    "\n",
    "# Encode labels\n",
    "le2 = preprocessing.LabelEncoder()\n",
    "le2.fit(df_micro2[\"primary_microconstituent\"].unique())\n",
    "list(le2.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "id": "cad26ad9-0bbb-4c2c-8682-60f512022f8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dlabel2 = le2.transform(df_micro2[\"primary_microconstituent\"])\n",
    "df_micro2.insert(2, \"label\", dlabel2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "id": "eb2e619e-0e12-4f4c-bdc4-a67018b2fccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>primary_microconstituent</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph20.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph41.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph44.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph99.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph114.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>892</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1599.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>936</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1684.tif</td>\n",
       "      <td>pearlite+widmanstatten</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>942</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1697.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>944</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1700.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>956</th>\n",
       "      <td>data/CMU-UHCS_Dataset/images/micrograph1723.tif</td>\n",
       "      <td>martensite</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path primary_microconstituent  \\\n",
       "15     data/CMU-UHCS_Dataset/images/micrograph20.tif               martensite   \n",
       "29     data/CMU-UHCS_Dataset/images/micrograph41.tif               martensite   \n",
       "31     data/CMU-UHCS_Dataset/images/micrograph44.tif               martensite   \n",
       "63     data/CMU-UHCS_Dataset/images/micrograph99.tif               martensite   \n",
       "71    data/CMU-UHCS_Dataset/images/micrograph114.tif               martensite   \n",
       "..                                               ...                      ...   \n",
       "892  data/CMU-UHCS_Dataset/images/micrograph1599.tif               martensite   \n",
       "936  data/CMU-UHCS_Dataset/images/micrograph1684.tif   pearlite+widmanstatten   \n",
       "942  data/CMU-UHCS_Dataset/images/micrograph1697.tif               martensite   \n",
       "944  data/CMU-UHCS_Dataset/images/micrograph1700.tif               martensite   \n",
       "956  data/CMU-UHCS_Dataset/images/micrograph1723.tif               martensite   \n",
       "\n",
       "     label  \n",
       "15       0  \n",
       "29       0  \n",
       "31       0  \n",
       "63       0  \n",
       "71       0  \n",
       "..     ...  \n",
       "892      0  \n",
       "936      1  \n",
       "942      0  \n",
       "944      0  \n",
       "956      0  \n",
       "\n",
       "[63 rows x 3 columns]"
      ]
     },
     "execution_count": 521,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_micro2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "id": "5129305d-64bc-428c-996a-6e3425b7c1f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature extraction with VGG16\n",
    "if os.path.exists(os.path.join(dpath, \"feature_test2.pkl\")) == False:\n",
    "    fs_test2 = np.zeros((df_micro2.shape[0], out_shapes[-1]))\n",
    "    m = \"block5_pool\"\n",
    "    for j, ph in tqdm(enumerate(df_micro2[\"path\"])):\n",
    "        x = load_image(ph)\n",
    "        xb = extmodel[m].predict(x, verbose = 0) # silence output\n",
    "        F = np.mean(xb,axis=(0,1,2))\n",
    "        # Save features\n",
    "        fs_test2[j, :] = F\n",
    "\n",
    "    # Save data\n",
    "    ## Create new files\n",
    "    fs_test2_p = open(os.path.join(dpath, \"feature_test2.pkl\"), \"wb\")\n",
    "    ## Write\n",
    "    pickle.dump(fs_test2, fs_test2_p)\n",
    "    ## Close files\n",
    "    fs_test2_p.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 540,
   "id": "7f5cde76-bf4f-43a4-beee-49407519566c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#load data\n",
    "fs_test2_p  = open(os.path.join(dpath, \"feature_test2.pkl\"), \"rb\")\n",
    "fs_test2 = pickle.load(fs_test2_p) # train feature\n",
    "fs_test2_p .close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 541,
   "id": "3ac2ce6c-c0a4-4301-a8d7-b55ab6724d0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                Test Label             Multi-OnevsOne\n",
      "0               martensite                spheroidite\n",
      "1               martensite                    network\n",
      "2               martensite                   pearlite\n",
      "3               martensite                spheroidite\n",
      "4               martensite                spheroidite\n",
      "5               martensite                    network\n",
      "6               martensite                spheroidite\n",
      "7   pearlite+widmanstatten                   pearlite\n",
      "8               martensite                   pearlite\n",
      "9               martensite                spheroidite\n",
      "10              martensite                spheroidite\n",
      "11  pearlite+widmanstatten                   pearlite\n",
      "12              martensite                   pearlite\n",
      "13  pearlite+widmanstatten                   pearlite\n",
      "14              martensite                   pearlite\n",
      "15  pearlite+widmanstatten                spheroidite\n",
      "16  pearlite+widmanstatten  spheroidite+widmanstatten\n",
      "17  pearlite+widmanstatten                   pearlite\n",
      "18              martensite                   pearlite\n",
      "19  pearlite+widmanstatten                spheroidite\n",
      "20  pearlite+widmanstatten                   pearlite\n",
      "21  pearlite+widmanstatten                spheroidite\n",
      "22  pearlite+widmanstatten                spheroidite\n",
      "23  pearlite+widmanstatten                   pearlite\n",
      "24  pearlite+widmanstatten                   pearlite\n",
      "25              martensite                   pearlite\n",
      "26              martensite                spheroidite\n",
      "27              martensite                   pearlite\n",
      "28              martensite                spheroidite\n",
      "29              martensite                   pearlite\n",
      "30              martensite                spheroidite\n",
      "31              martensite                   pearlite\n",
      "32  pearlite+widmanstatten                   pearlite\n",
      "33              martensite                   pearlite\n",
      "34              martensite                spheroidite\n",
      "35  pearlite+widmanstatten                spheroidite\n",
      "36              martensite                spheroidite\n",
      "37  pearlite+widmanstatten                spheroidite\n",
      "38  pearlite+widmanstatten                   pearlite\n",
      "39  pearlite+widmanstatten                   pearlite\n",
      "40              martensite                   pearlite\n",
      "41              martensite                spheroidite\n",
      "42  pearlite+widmanstatten                   pearlite\n",
      "43  pearlite+widmanstatten                spheroidite\n",
      "44  pearlite+widmanstatten  spheroidite+widmanstatten\n",
      "45  pearlite+widmanstatten                   pearlite\n",
      "46  pearlite+widmanstatten                   pearlite\n",
      "47              martensite                   pearlite\n",
      "48  pearlite+widmanstatten                   pearlite\n",
      "49              martensite                   pearlite\n",
      "50  pearlite+widmanstatten  spheroidite+widmanstatten\n",
      "51  pearlite+widmanstatten                   pearlite\n",
      "52              martensite                   pearlite\n",
      "53  pearlite+widmanstatten                spheroidite\n",
      "54              martensite                spheroidite\n",
      "55              martensite                spheroidite\n",
      "56              martensite                   pearlite\n",
      "57              martensite                    network\n",
      "58              martensite                spheroidite\n",
      "59  pearlite+widmanstatten                   pearlite\n",
      "60              martensite                spheroidite\n",
      "61              martensite                   pearlite\n",
      "62              martensite                spheroidite\n"
     ]
    }
   ],
   "source": [
    "pred_multi2 = clf.predict(fs_test2)\n",
    "\n",
    "res_ps2 = pd.DataFrame({\"Test Label\": le2.inverse_transform(df_micro2[\"label\"]),\\\n",
    "              \"Multi-OnevsOne\": le.inverse_transform(pred_multi2)})\n",
    "\n",
    "print(res_ps2.to_string())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
